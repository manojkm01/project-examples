# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: ubuntu-latest

#variables:
#  working-dir: '/home/vsts/work/1/s/project-examples/maven-examples/maven-example/'

steps:
- task: CmdLine@2
  inputs:
    script: 'pwd'


#- task: CmdLine@2
#  inputs:
#    workingDirectory: /home/vsts/work/1/s/project-examples/maven-examples/maven-example/




- task: ArtifactoryMaven@2
  inputs:
    mavenPomFile: 'project-examples/maven-examples/maven-example/pom.xml'
    goals: 'install'
    artifactoryResolverService: 'manoj'
    targetResolveReleaseRepo: 'ganavik-libs-release'
    targetResolveSnapshotRepo: 'ganavik-libs-snapshot'
    artifactoryDeployService: 'manoj'
    targetDeployReleaseRepo: 'ganavik-promote-libs-release'
    targetDeploySnapshotRepo: 'ganavik-promote-libs-snapshot'
    
- task: CmdLine@2
  inputs:
    script: |
      export MAVEN_OPTS="-Dmaven.repo.local=$(Build.SourcesDirectory)/.m2/repository"  # Optional: Set custom Maven repo directory
      mvn clean install -f $(working-dir)/pom.xml  # Run Maven build in the correct directory
  displayName: 'Run Maven Build'

# - task: Gradle@3
#   inputs:
#     gradleWrapperFile: 'gradlew'  # Path to your Gradle wrapper
#     tasks: 'build'  # Replace with the tasks you want to run
#     options: '-Xmx3072m' 
#     publishJUnitResults: true
#     testResultsFiles: '**/TEST-*.xml'  # Updated pattern for test result files
#     javaHomeOption: 'JDKVersion'
#     jdkVersionOption: '1.11'  # Replace with your JDK version
#     jdkArchitectureOption: 'x64'
